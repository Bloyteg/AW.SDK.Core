//This code was auto-generated.  It is not recommended to modify it.
//If you wish to change this code, please update the template associated with it.
using System;
using System.Runtime.InteropServices;

namespace AW
{
	partial class Instance
	{
	$callbacks : {
	#region $it.name$
	//Declare the types to handle both the managed and native callbacks.
	private Instance.Callback managed$it.name$;
	private InterOp.Callback native$it.name$;

	//Native callback handler.
	private void On$it.name$(int error)
	{
		//Passes off the callback to the managed callback handler.
		managed$it.name$(this, error);
	}

	//Managed callback handler.
	/// <summary>
	/// Handles $it.sdkName$ from the C SDK.
	/// </summary>
	public event Callback $it.name$
	{
		//Handles hooking a new delegate to the callback.
		add
		{
			//If the callback is null, set the native callback for the instance.
			if (managed$it.name$ == null)
			{
				SetInstance();
				native$it.name$ = new InterOp.Callback(On$it.name$);
				InterOp.aw_instance_callback_set(AW_CALLBACK.$it.sdkName$, native$it.name$);
			}

			managed$it.name$ += value;
		}

		//Handles removing a delegate from the callback.
		remove
		{
			managed$it.name$ -= value;

			//If the callback is null, remove the native callback for the instance.
			if (managed$it.name$ == null)
			{
				SetInstance();
				native$it.name$ = null;
				InterOp.aw_instance_callback_set(AW_CALLBACK.$it.sdkName$, null);
			}
		}
	}
	#endregion
	}$
	}
}